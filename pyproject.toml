[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "xenopict"
dynamic = ["version"]
authors = [{ name = "S. Joshua Swamidass", email = "swamidass@gmail.com" }]
description = "A Python library for drawing chemical structures"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
dependencies = [
  "colorcet>=3.1.0",
  "lxml>=5.3.1",
  "matplotlib>=3.9.4",
  "networkx>=3.2.1",
  "pydantic>=2.11.1",
  "rdkit>=2023.9.1",
  "shapely>=2.0.7",
  "simplejson>=3.20.1"
]

[project.optional-dependencies]
pandas = [
    "pandas>=2.2.3",
    "jinja2>=3.1.0"
]

[project.urls]
"Homepage" = "https://github.com/swamidass/xenopict"
"Bug Tracker" = "https://github.com/swamidass/xenopict/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
include = [
  "xenopict/**/*.py",
  "xenopict/layout/js/*.js", # Include JavaScript files
]

[tool.hatch.envs.default]
installer = "uv"
extra-scripts.pip = "{env:HATCH_UV} pip {args}"

[tool.hatch.envs.hatch-test]
installer = "uv"
extra-scripts.pip = "{env:HATCH_UV} pip {args}"
default-args = ["xenopict"]
extra-args = ["--cov=xenopict", '--cov-fail-under=80', '--no-cov-on-fail', '--cov-report=term']

dependencies = [
    "pytest>=8.1.0",
    "pytest-mock>=3.12.0",
    "pytest-randomly>=3.15.0",
    "pytest-rerunfailures>=14.0",
    "pytest-xdist[psutil]>=3.5.0",
    "pytest-cov>=4.1.0",
    "numpy>=1.26.0"
]
features = ["pandas"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11", "3.10", "3.9", "3.12"]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
# Ignore line length errors as they are primarily in docstrings and error messages
ignore = ["E501"]
select = ["E", "F", "I"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
addopts = "--doctest-modules"
pythonpath = "./"
testpaths = ["xenopict"]
doctest_optionflags = [
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
  "ELLIPSIS",
]

[tool.coverage.run]
source = ["xenopict"]
branch = true
omit = [
  "xenopict/_version.py",
  "xenopict/_static_version.py",
  "xenopict/magic.py",
  "xenopict/monkey.py",
  "xenopict/tests/*",
  "setup.py",
  "conf.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "raise ImportError",
  "except ImportError:",
  "def __getattr__",
  "@(abc\\.)?abstractmethod",
  "TYPE_CHECKING",
  "if TYPE_CHECKING:",
  "\\.\\.\\."
]
show_missing = true

